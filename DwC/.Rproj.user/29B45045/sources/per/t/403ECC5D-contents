if(!require(worrms)){install.packages("worrms")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(tidyr)){install.packages("tidyr")}
if(!require(writexl)){install.packages("writexl")}

#Consultar: https://rs.gbif.org/core/dwc_occurrence_2024-02-23.xml


MatrizConteo<-readxl::read_excel("datos_ERFEN_2023_pseudolong_procesado.xlsx", sheet = "Conteo")
Matriz_Densidad<-readxl::read_excel("datos_ERFEN_2023_pseudolong_procesado.xlsx", sheet = "Densidad")

# Convertir de wide a long
MatrizConteo_long <- tidyr::pivot_longer(MatrizConteo, 
                           cols = 9:257,
                           names_to = "verbatimIdentification",
                           values_to = "individualCount")
Matriz_Densidad_long <- tidyr::pivot_longer(Matriz_Densidad, 
                                     cols = 9:257,
                                     names_to = "verbatimIdentification",
                                     values_to = "organismQuantity")



union<-base::cbind(MatrizConteo_long, Matriz_Densidad_long[,10])

union<-union[c(4,9:11)]

eventoTable<-utils::read.csv2("./DwC/event.csv", header = TRUE, sep=",")

tablaMerge<-base::merge(union, eventoTable, by="fieldNumber")

#Inicio del OCcurrence####


#occurrenceID####
occurrenceID_secuencia <- as.data.frame(sprintf("%05d", seq(1, 28137)))
colnames(occurrenceID_secuencia)<-"occurrenceID_secuencia"

bindTabla<-cbind(occurrenceID_secuencia, tablaMerge$eventID)
bindTabla<-bindTabla%>% mutate(occurrenceID = paste0(bindTabla$`tablaMerge$eventID`,":",bindTabla$occurrenceID_secuencia))
occurrenceID<-as.data.frame(bindTabla[,3])
colnames(occurrenceID)<-"occurrenceID"

tablaMerge<-cbind(occurrenceID, tablaMerge)

#basisOfRecord####
basisOfRecord<-as.data.frame(rep("HumanObservation", time=28137))
colnames(basisOfRecord)="basisOfRecord"

#type####

type<-as.data.frame(rep("Event", time=28137))
colnames(type)="type"

#institutionCode####

institutionCode<-as.data.frame(tablaMerge$institutionCode)
colnames(institutionCode)="institutionCode"

#institutionID####

institutionID<-as.data.frame(tablaMerge$institutionID)
colnames(institutionID)="institutionID"

#datasetName####

datasetName<-as.data.frame(tablaMerge$datasetName)
colnames(datasetName)="datasetName"

#datasetID####

datasetID<-as.data.frame(tablaMerge$datasetID)
colnames(datasetID)="datasetID"

#language####

language<-as.data.frame(tablaMerge$language)
colnames(language)="language"

#rightsHolder####

rightsHolder<-as.data.frame(tablaMerge$rightsHolder)
colnames(rightsHolder)="rightsHolder"

#rightsHolder####

accessRights<-as.data.frame(rep("Sólo para uso no comercial", time=28137))
colnames(accessRights)="accessRights"

#references####

references<-as.data.frame(tablaMerge$references)
colnames(references)="references"

#ownerInstitutionCode####

ownerInstitutionCode<-as.data.frame(rep("Centro de Investigaciones Oceanográficas e Hidrográficas del Pacífico - Dirección General Marítima (DIMAR)", time=28137))
colnames(ownerInstitutionCode)="ownerInstitutionCode"


#recordNumber####
recordNumber<-as.data.frame(rep("Solicitud 31", time=28137))
colnames(recordNumber)="recordNumber"

#recordedBy####
recordedBy<-as.data.frame(rep("Fredy Albeiro Castrillón Valencia", time=28137))
colnames(recordedBy)="recordedBy"

#recordedByID####

recordedByID<-as.data.frame(rep("https://orcid.org/0000-0003-2815-6122", time=28137))
colnames(recordedByID)="recordedByID"

#individualCount####

individualCount<-as.data.frame(tablaMerge$individualCount)
colnames(individualCount)="individualCount"


#organismQuantity####

organismQuantity<-as.data.frame(as.integer(round(tablaMerge$organismQuantity)))
colnames(organismQuantity)="organismQuantity"

#organismQuantityType####

organismQuantityType<-as.data.frame(rep("Células por litro", time=28137))
colnames(organismQuantityType)="organismQuantityType"

#occurrenceStatus####

occurrenceStatus<-as.data.frame(individualCount%>%mutate(occurrenceStatus= ifelse(individualCount > 0, "present", "absent")))
occurrenceStatus<-as.data.frame(occurrenceStatus[,2])
colnames(occurrenceStatus)="occurrenceStatus"

#parentEventID####
parentEventID<-as.data.frame(tablaMerge$parentEventID)
colnames(parentEventID)="parentEventID"

#eventID####
eventID<-as.data.frame(tablaMerge$eventID)
colnames(eventID)="eventID"

#samplingProtocol####
samplingProtocol<-as.data.frame(tablaMerge$samplingProtocol)
colnames(samplingProtocol)="samplingProtocol"


#sampleSizeValue####
sampleSizeValue<-as.data.frame(tablaMerge$sampleSizeValue)
colnames(sampleSizeValue)="sampleSizeValue"

#sampleSizeUnit####
sampleSizeUnit<-as.data.frame(tablaMerge$sampleSizeUnit)
colnames(sampleSizeUnit)="sampleSizeUnit"

#samplingEffort####
samplingEffort<-as.data.frame(tablaMerge$samplingEffort)
colnames(samplingEffort)="samplingEffort"

#eventDate####
eventDate<-as.data.frame(tablaMerge$eventDate)
colnames(eventDate)="eventDate"

#year####
year<-as.data.frame(tablaMerge$year)
colnames(year)="year"

#month####
month<-as.data.frame(tablaMerge$month)
colnames(month)="month"


#day####
day<-as.data.frame(tablaMerge$day)
colnames(day)="day"



#eventTime####
eventTime<-as.data.frame(tablaMerge$eventTime)
colnames(eventTime)="eventTime"

#habitat####
habitat<-as.data.frame(tablaMerge$habitat)
colnames(habitat)="habitat"

#fieldNumber####
fieldNumber<-as.data.frame(tablaMerge$fieldNumber)
colnames(fieldNumber)="fieldNumber"

#eventRemarks####
eventRemarks<-as.data.frame(tablaMerge$eventRemarks)
colnames(eventRemarks)="eventRemarks"

#locationID####
locationID<-as.data.frame(tablaMerge$locationID)
colnames(locationID)="locationID"

#higherGeography####
higherGeography<-as.data.frame(tablaMerge$higherGeography)
colnames(higherGeography)="higherGeography"

#continent####
continent<-as.data.frame(tablaMerge$continent)
colnames(continent)="continent"

#waterBody####
waterBody<-as.data.frame(tablaMerge$waterBody)
colnames(waterBody)="waterBody"

#country####
country<-as.data.frame(tablaMerge$country)
colnames(country)="country"

#country####
countryCode<-as.data.frame(tablaMerge$countryCode)
colnames(countryCode)="countryCode"

#locality####
locality<-as.data.frame(tablaMerge$locality)
colnames(locality)="locality"


#minimumDepthInMeters####
minimumDepthInMeters<-as.data.frame(tablaMerge$minimumDepthInMeters)
colnames(minimumDepthInMeters)="minimumDepthInMeters"

#maximumDepthInMeters####
maximumDepthInMeters<-as.data.frame(tablaMerge$maximumDepthInMeters)
colnames(maximumDepthInMeters)="maximumDepthInMeters"

#decimalLatitude####
decimalLatitude<-as.data.frame(tablaMerge$decimalLatitude)
colnames(decimalLatitude)="decimalLatitude"

#decimalLongitude####
decimalLongitude<-as.data.frame(tablaMerge$decimalLongitude)
colnames(decimalLongitude)="decimalLongitude"

#geodeticDatum####
geodeticDatum<-as.data.frame(tablaMerge$geodeticDatum)
colnames(geodeticDatum)="geodeticDatum"

#georeferencedBy####
georeferencedBy<-as.data.frame(tablaMerge$georeferencedBy)
colnames(georeferencedBy)="georeferencedBy"


#identifiedBy####
identifiedBy<-as.data.frame(rep("Humberto Luis Quintana-Manotas", time=28137))
colnames(identifiedBy)="identifiedBy"

#identifiedByID####

identifiedByID<-as.data.frame(rep("https://orcid.org/0000-0002-1700-4476", time=28137))
colnames(identifiedByID)="identifiedByID"


#dateIdentified####

dateIdentified<-as.data.frame(rep("2024-04-01/2024-06-30", time=28137))
colnames(dateIdentified)="dateIdentified"


#verbatimIdentification####
verbatimIdentification<-as.data.frame(tablaMerge$verbatimIdentification)
colnames(verbatimIdentification)="verbatimIdentification"


#occurrenceStatus####

identificationQualifier <- as.data.frame(
  verbatimIdentification %>%
    mutate(
      identificationQualifier = case_when(
        verbatimIdentification == "Gonyaulax aff. polygramma" ~ "aff.",
        verbatimIdentification == "Gonyaulax aff. spinifera" ~ "aff.",
        verbatimIdentification == "Gonyaulax aff. striata" ~ "aff.",
        verbatimIdentification == "Pleurosigma aff. diversestriatum" ~ "aff.",
        verbatimIdentification == "Oxytoxum aff. turbo" ~ "aff.",
        verbatimIdentification == "Prorocentrum aff. nux" ~ "aff.",
        verbatimIdentification == "Protoperidinium aff. acutum" ~ "aff.",
        verbatimIdentification == "Protoperidinium aff. conicum" ~ "aff.",
        verbatimIdentification == "Protoperidinium aff. divergens" ~ "aff.",
        verbatimIdentification == "Protoperidinium aff. minutum" ~ "aff.",
        verbatimIdentification == "Protoperidinium aff. oceanicum" ~ "aff.",
        verbatimIdentification == "Protoperidinium aff. pyriforme" ~ "aff.",
        verbatimIdentification == "Pseudo-nitzschia aff. lineola" ~ "aff.",
        verbatimIdentification == "Rhizosolenia aff. clevei" ~ "aff.",
        verbatimIdentification == "Rhizosolenia aff. formosa" ~ "aff.",
        verbatimIdentification == "Tripos aff. brevis" ~ "aff.",
        TRUE ~ "" # Caso por defecto si ninguna condición se cumple
      )
    )
)
identificationQualifier<-as.data.frame(identificationQualifier[,2])
colnames(identificationQualifier)="identificationQualifier"


#Tabla Final####

TablaFinal<-cbind(occurrenceID,
              basisOfRecord,
              type,
              institutionCode,
              institutionID,
              datasetName,
              datasetID,
              language,
              rightsHolder,
              accessRights,
              references,
              ownerInstitutionCode,
              recordNumber,
              recordedBy,
              recordedByID,
              individualCount,
              organismQuantity,
              organismQuantityType,
              occurrenceStatus,
              parentEventID,
              eventID,
              samplingProtocol,
              sampleSizeValue,
              sampleSizeUnit,
              samplingEffort,
              eventDate,
              year,
              month,
              day,
              eventTime,
              habitat,
              fieldNumber,
              eventRemarks,
              locationID,
              higherGeography,
              continent,
              waterBody,
              country,
              countryCode,
              locality,
              minimumDepthInMeters,
              maximumDepthInMeters,
              decimalLatitude,
              decimalLongitude,
              geodeticDatum,
              georeferencedBy,
              identifiedBy,
              identifiedByID,
              dateIdentified,
              verbatimIdentification,
              identificationQualifier
              )






#Taxonomía####
taxonomia<-readxl::read_excel("datos_ERFEN_2023_pseudolong_procesado.xlsx", sheet = "listadoTaxonomico")
taxonomia<-taxonomia%>%select(verbatimIdentification,
                   scientificname, 
                   authority, 
                   url, 
                   lsid, 
                   status,
                   kingdom,
                   phylum,
                   class,
                   family,
                   genus)

colnames(taxonomia)<-c("verbatimIdentification",
"scientificName",
"scientificNameAuthorship",
"taxonID",
"scientificNameID",
"taxonRank",
"kingdom",
"phylum",
"class",
"family",
"genus")


DwC<-merge(TablaFinal,taxonomia, by= "verbatimIdentification")

DwC<-DwC%>%arrange(occurrenceID)

DwC<-DwC%>%
  select(

occurrenceID,
basisOfRecord,
type,
institutionCode,
institutionID,
datasetName,
datasetID,               
language,
rightsHolder,
accessRights,
references,             
ownerInstitutionCode,
recordNumber,
recordedBy,
recordedByID,            
individualCount,
organismQuantity,
organismQuantityType,
occurrenceStatus,        
parentEventID,
eventID,
samplingProtocol,
sampleSizeValue,         
sampleSizeUnit,
samplingEffort,
eventDate,
year,                   
month,
day,
eventTime,
habitat,
fieldNumber,
eventRemarks,
locationID,
higherGeography,         
continent,
waterBody,
country,
countryCode,             
locality,
minimumDepthInMeters,
maximumDepthInMeters,
decimalLatitude ,        
decimalLongitude,
geodeticDatum,
georeferencedBy,
identifiedBy,            
identifiedByID,
dateIdentified,
identificationQualifier,
verbatimIdentification,
scientificName,        
scientificNameAuthorship,
taxonID,
scientificNameID,
taxonRank,
kingdom,
phylum,
class,
family,                  
genus  
)

write.table(
  DwC, 
  file = "./DwC/Occurrence.csv", 
  col.names = TRUE, 
  row.names = FALSE, 
  sep = ",", 
  fileEncoding = "UTF-8",
  na = ""
)







